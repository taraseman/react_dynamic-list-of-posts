{"version":3,"sources":["helpers.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["baseUrl","getPostsById","id","fetch","then","resolve","json","result","data","getComentsById","postId","PostsList","posts","setComments","setchoosenPost","useState","choosenPostId","setChoosenId","openPostHandler","a","comments","choosenPost","filter","comment","closePostHandler","className","map","post","key","userId","title","type","onClick","NewCommentForm","commentsUpdate","name","setName","email","setEmail","body","setBody","newComments","filteredComments","sendForm","bodyData","newMessage","method","headers","JSON","stringify","onSubmit","event","preventDefault","required","placeholder","value","onChange","target","PostDetails","isCommentShow","setCommentShow","clickDeleteItemButton","deleteComment","commentss","curComment","createdAt","slice","isShown","length","defaultProps","App","postsFromServer","setAllPosts","setPosts","chosenId","setNewId","useEffect","allPosts","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7d70c44.chunk.js","sourcesContent":["const baseUrl = 'https://mate-api.herokuapp.com';\n\nexport const getPosts = () => (\n  fetch(`${baseUrl}/posts`)\n    .then(resolve => resolve.json()).then(result => result.data));\n\nexport const getPostsById = id => (\n  fetch(`${baseUrl}/posts/${id}`)\n    .then(resolve => resolve.json()).then(result => result.data));\n\nexport const getComentsById = postId => (\n  fetch(`${baseUrl}/comments?postId=${postId}`)\n    .then(resolve => resolve.json())\n    .then(result => result.data));\n\nexport const deleteComment = (id) => {\n  fetch(`${baseUrl}/comments/${id}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const writeComment = (bodyData) => {\n  fetch(`${baseUrl}/comments`, {\n    method: 'POST',\n    headers: {\n      'Context-type': 'application/json;charset=UTF-8',\n    },\n    body: JSON.stringify(bodyData),\n  });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostsById, getComentsById } from '../../helpers';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, setComments, setchoosenPost }) => {\n  const [choosenPostId, setChoosenId] = useState('');\n\n  const openPostHandler = async(id) => {\n    let comments = await getComentsById(id);\n    const choosenPost = await getPostsById(id);\n\n    comments = comments\n      .filter(comment => comment.postId === id);\n    setComments(comments);\n\n    setchoosenPost(choosenPost);\n    setChoosenId(id);\n  };\n\n  const closePostHandler = () => {\n    setchoosenPost(null);\n    setChoosenId('');\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            {(choosenPostId !== post.id) ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  openPostHandler(post.id);\n                }}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={closePostHandler}\n              >\n                Close\n              </button>\n            )\n          }\n\n          </li>\n        ))\n        }\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  setComments: PropTypes.func.isRequired,\n  setchoosenPost: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { writeComment, getComentsById } from '../../helpers';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, commentsUpdate }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const newComments = async() => {\n    const filteredComments = await getComentsById(postId);\n\n    commentsUpdate(filteredComments);\n  };\n\n  const sendForm = () => {\n    const newMessage = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    setName('');\n    setEmail('');\n    setBody('');\n    writeComment(newMessage);\n    newComments();\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    sendForm();\n  };\n\n  const changeNameHandler = (event) => {\n    setName(event.target.value);\n  };\n\n  const changeEmailHandler = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const changeCommentHandler = (event) => {\n    setBody(event.target.value);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={changeNameHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={changeEmailHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          required\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={changeCommentHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  commentsUpdate: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { deleteComment } from '../../helpers';\nimport './PostDetails.scss';\n\nexport function PostDetails({ post, comments, commentsUpdate }) {\n  const [isCommentShow, setCommentShow] = useState(false);\n\n  const clickChangeButton = () => {\n    setCommentShow(isShown => !isShown);\n  };\n\n  const clickDeleteItemButton = (id) => {\n    deleteComment(id);\n    commentsUpdate(\n      commentss => commentss\n        .filter(curComment => curComment.id !== id),\n    );\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <h3>{post.title}</h3>\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n        <p>{post.createdAt.slice(0, 10)}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={clickChangeButton}\n        >\n          {`${!isCommentShow ? 'Show' : 'Hide'} ${comments.length} comments`}\n        </button>\n        {isCommentShow && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    clickDeleteItemButton(comment.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>\n                  {comment.body}\n                  <br />\n                  {comment.createdAt.slice(0, 10)}\n                </p>\n\n              </li>\n            ))\n            }\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={post.id}\n            commentsUpdate={commentsUpdate}\n          />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nPostDetails.propTypes = {\n  post: PropTypes.shape({\n    createdAt: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    body: PropTypes.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ),\n  commentsUpdate: PropTypes.func.isRequired,\n};\n\nPostDetails.defaultProps = {\n  comments: [],\n};\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts } from './helpers';\n\nconst App = () => {\n  const [postsFromServer, setAllPosts] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [chosenId, setNewId] = useState('0');\n  const [comments, setComments] = useState([]);\n  const [choosenPost, setchoosenPost] = useState(null);\n\n  useEffect(() => {\n    getPosts().then((allPosts) => {\n      setAllPosts(allPosts);\n      setPosts(allPosts);\n      setAllPosts(allPosts);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (+chosenId === 0) {\n      setPosts(postsFromServer);\n    } else {\n      setPosts(postsFromServer.filter(post => post.userId === +chosenId));\n    }\n  }, [chosenId]);\n\n  const selectHandler = (event) => {\n    setNewId(event.target.value);\n  };\n\n  const commentsUpdate = useCallback(setComments, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectHandler}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setComments={setComments}\n            setchoosenPost={setchoosenPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {choosenPost && (\n          <PostDetails\n            post={choosenPost}\n            comments={comments}\n            commentsUpdate={commentsUpdate}\n          />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}